{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SpeechRecognition","window","webkitSpeechRecognition","recognition","beforemove","MenuAppBar","props","React","auth","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","IconButton","size","onClick","event","currentTarget","color","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","option","index","MenuItem","disabled","selected","handleMenuItemClick","onclick","App","state","status","text","finalText","isListen","hideStart","hideStop","lang","content","this","blob","Blob","type","now","Date","downloadTime","localStorage","getItem","Number","link","document","createElement","y","addZero","getFullYear","m","getMonth","d","getDate","href","URL","createObjectURL","download","addDoubleZero","nowDownloadTime","setItem","click","onbeforeunload","int","setState","stop","abort","start","interimText","onresult","e","i","resultIndex","results","length","transcript","isFinal","obj","getElementById","scrollTop","scrollHeight","interimResults","continuous","onend","CssBaseline","changeLang","className","Container","maxWidth","Button","split","str","Tooltip","title","placement","Fab","downloadAsText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a89f71b1.chunk.js","sourcesContent":["import * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Fab from '@mui/material/Fab';\nimport SaveIcon from '@mui/icons-material/Save';\nimport Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\nimport IconButton from '@mui/material/IconButton';\nimport LanguageIcon from '@mui/icons-material/Language';\nimport Menu from '@mui/material/Menu';\nimport './App.css';\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n\nlet recognition = new SpeechRecognition();\n\nlet beforemove = false;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: '「文字起こし開始」をクリックしてください',\n      text: '',\n      finalText: '',\n      isListen: false,\n      hideStart: null,\n      hideStop: 'hide',\n      lang: 'ja-JP',\n    };\n  }\n\n  downloadAsText() {\n    const content = this.state.finalText;\n    const blob = new Blob([content], { type: 'application/octet-stream' });\n    const now = new Date();\n    const downloadTime = localStorage.getItem(\"todayDownload\") ? Number(localStorage.getItem(\"todayDownload\")) : 1;\n    const link = document.createElement('a');\n    const y = this.addZero(now.getFullYear());\n    const m = this.addZero(now.getMonth() + 1);\n    const d = this.addZero(now.getDate());\n    link.href = URL.createObjectURL(blob);\n    link.download = `transcription-${y}-${m}-${d}-${this.addDoubleZero(downloadTime)}.txt`;\n    const nowDownloadTime = downloadTime + 1;\n    localStorage.setItem(\"todayDownload\", nowDownloadTime);\n    link.click();\n    window.onbeforeunload = null;\n  }\n\n  addZero(int) {\n    return int < 10 ? \"0\" + int : int;\n  }\n\n  addDoubleZero(int) {\n    if (int < 10) {\n      return \"00\" + int;\n    } else if (int < 100) {\n      return \"0\" + int;\n    } else {\n      return int;\n    }\n  }\n\n  changeLang(index) {\n    const langList = [\"ja-JP\", \"en-US\", \"en-GB\"];\n    this.setState({ lang: langList[index - 1], });\n  }\n\n\n  render() {\n    if (typeof SpeechRecognition === 'undefined') {\n      this.setState({ status: 'このサイトは、Chrome、Edge、Firefoxにのみ対応しています。' })\n    } else {\n      this.stop = () => {\n        recognition.abort();\n        this.setState({ status: \"「文字起こし開始」をクリックしてください。\", isListen: false, hideStart: null, hideStop: \"hide\", });\n      }\n      this.start = () => {\n        recognition.start();\n        this.setState({ status: \"あなたの美声を聞き取っています...\", isListen: true, hideStart: \"hide\", hideStop: null, });\n      }\n\n      let finalText = this.state.finalText;\n      let interimText = '';\n      recognition.onresult = (event) => {\n        interimText = '';\n        if(!beforemove){\n          window.onbeforeunload = function(e) {\n            return false;\n          }\n          beforemove = true;\n        }\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          let transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalText += (finalText ? \"\\n\\n\" : \"\") + transcript;\n          } else {\n            interimText += transcript;\n          }\n        }\n        this.setState({ text: interimText, finalText: finalText });\n        const obj = document.getElementById(\"body\");\n        obj.scrollTop = obj.scrollHeight;\n      }\n\n      recognition.lang = this.state.lang;\n      recognition.interimResults = true;\n      recognition.continuous = true\n      recognition.onend = () => {\n        if (this.state.isListen) {\n          recognition.start();\n        }\n      }\n\n    }\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <div>\n          <MenuAppBar onclick={(index) => this.changeLang(index)} />\n\n          <div className=\"btns\">\n            <Container maxWidth=\"sm\">\n              <div className=\"flex-2 top-marg\">\n                <Button variant=\"contained\" className={this.state.hideStart} onClick={() => this.start()}>文字起こし開始</Button>\n                <Button variant=\"contained\" className={this.state.hideStop} onClick={() => this.stop()}>文字起こし停止</Button>\n\n                <span className=\"status\">{this.state.status}</span>\n              </div>\n            </Container>\n          </div>\n        </div>\n        <div className=\"body\" id=\"body\">\n          <Container maxWidth=\"sm\">\n            {this.state.finalText.split('\\n').map((str, index) => (<React.Fragment key={index}>{str}<br /></React.Fragment>))}<span className=\"gray\">{this.state.text}</span>\n          </Container>\n        </div>\n\n        <div className=\"fab-wrapper\">\n          <Tooltip title=\"テキストファイル形式で保存\" placement=\"top\">\n            <Fab className=\"fab\" color=\"primary\" aria-label=\"add\" onClick={() => { this.downloadAsText() }}>\n              <SaveIcon />\n            </Fab>\n          </Tooltip>\n        </div>\n\n      </React.Fragment >\n    );\n  }\n}\n\nfunction MenuAppBar(props) {\n  const [auth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n\n  const options = [\n    '音声認識で検出する言語を選択',\n    '日本語',\n    '英語（米国）',\n    '英語（英国）',\n  ];\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            文字起こし\n          </Typography>\n          {auth && (\n            <div>\n              <IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <LanguageIcon />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                {options.map((option, index) => (\n                  <MenuItem\n                    key={option}\n                    disabled={index === 0}\n                    selected={index === selectedIndex}\n                    onClick={(event) => { handleMenuItemClick(event, index); props.onclick(index); }}\n                  >\n                    {option}\n                  </MenuItem>\n                ))}\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}